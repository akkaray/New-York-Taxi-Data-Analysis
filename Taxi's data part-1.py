{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb26f07c-1084-4ae6-a60d-0b2cd641a0d6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "EOF while scanning triple-quoted string literal (Temp/ipykernel_17016/439438744.py, line 208)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"C:\\Users\\yasha\\AppData\\Local\\Temp/ipykernel_17016/439438744.py\"\u001b[1;36m, line \u001b[1;32m208\u001b[0m\n\u001b[1;33m    \u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m EOF while scanning triple-quoted string literal\n"
     ]
    }
   ],
   "source": [
    "#What datetime range does your data cover?\n",
    "import csv,time,datetime\n",
    "from math import radians, cos, sin, asin, sqrt,acos\n",
    "\n",
    "fn='C:/Users/yasha/OneDrive/Documents/Yahsaswini/Big data procs/Week-4 Homework/trip_data_12.csv'\n",
    "f= open(fn,'r')\n",
    "reader = csv.reader(f)\n",
    "#What datetime range does your data cover?  How many rows are there total?\n",
    "n=0\n",
    "mindate1 = None\n",
    "maxdate1 = None\n",
    "for row in reader:\n",
    "    dts = row[5]\n",
    "    dto = None\n",
    "    try:\n",
    "        dto = datetime.datetime.strptime(dts, \"%Y-%m-%d %H:%M:%S\")\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "    if dto is not None:\n",
    "        if n == 0 :\n",
    "            mindate1 = dto\n",
    "            maxdate1 = dto\n",
    "        elif dto < mindate1:\n",
    "            mindate1 = dto\n",
    "        elif dto > maxdate1:\n",
    "            maxdate1 = dto\n",
    "        n +=1\n",
    "print(mindate1,maxdate1)\n",
    "n=0\n",
    "mindate2 = None\n",
    "maxdate2 = None\n",
    "for row in reader:\n",
    "    dts = row[6]\n",
    "    dto = None\n",
    "    try:\n",
    "        dto = datetime.datetime.strptime(dts, \"%Y-%m-%d %H:%M:%S\")\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "    if dto is not None:\n",
    "        if n == 0 :\n",
    "            mindate2 = dto\n",
    "            maxdate2 = dto\n",
    "        elif dto < mindate2:\n",
    "            mindate2 = dto\n",
    "        elif dto > maxdate2:\n",
    "            maxdate2 = dto\n",
    "        n +=1\n",
    "print(mindate2,maxdate2) \n",
    "# How many rows are there total?\n",
    "n=0\n",
    "for row in reader:\n",
    "    if n % 1000000 == 0:\n",
    "        print(n)\n",
    "    n+=1\n",
    "print(n)\n",
    "\n",
    "#What are the field names?  Give descriptions for each field,Give some sample data for each field.\n",
    "\n",
    "n=0  \n",
    "for row in reader:\n",
    "    print(row)\n",
    "    if n > 2:\n",
    "        break\n",
    "    n +=1\n",
    "\n",
    "\n",
    "#What is the geographic range of your data (min/max - X/Y)?\n",
    "\n",
    "minpickup_latitude = None\n",
    "maxpickup_latitude = None\n",
    "n = 0\n",
    "for row in reader:\n",
    "    try:\n",
    "        latitude = float(row[11])\n",
    "    \n",
    "    except:\n",
    "        continue\n",
    "        \n",
    "    if latitude is not None:\n",
    "        if latitude > 36 and latitude < 45:\n",
    "            \n",
    "            if n == 0 :\n",
    "                minpickup_latitude = latitude\n",
    "                maxpickup_latitude = latitude\n",
    "            elif  latitude < minpickup_latitude:\n",
    "                minpickup_latitude = latitude\n",
    "            elif latitude > maxpickup_latitude:\n",
    "                maxpickup_latitude = latitude\n",
    "            \n",
    "           \n",
    "            n +=1\n",
    "print(\"min and max values of pickup_latitude is -\",minpickup_latitude,maxpickup_latitude)\n",
    "\n",
    "minpickup_longitude = None\n",
    "maxpickup_longitude = None\n",
    "n = 0\n",
    "for row in reader:\n",
    "    try:\n",
    "        longitude = float(row[10])\n",
    "    \n",
    "    except:\n",
    "        continue\n",
    "        \n",
    "    if longitude is not None:\n",
    "        if longitude > -78 and longitude < -73 :\n",
    "            \n",
    "            if n == 0 :\n",
    "                minpickup_longitude = longitude\n",
    "                maxpickup_longitude = longitude\n",
    "            elif  longitude < minpickup_longitude:\n",
    "                minpickup_longitude = longitude\n",
    "            elif longitude > maxpickup_longitude:\n",
    "                maxpickup_longitude = longitude\n",
    "            \n",
    "           \n",
    "    n +=1\n",
    "print(\"min and max values of pickup_longitude is -\",minpickup_longitude,maxpickup_longitude)\n",
    "\n",
    "mindropoff_longitude = None\n",
    "maxdropoff_longitude = None\n",
    "n = 0\n",
    "for row in reader:\n",
    "    try:\n",
    "        longitude = float(row[12])\n",
    "    \n",
    "    except:\n",
    "        continue\n",
    "        \n",
    "    if longitude is not None:\n",
    "        if longitude > -78 and longitude < -73 :\n",
    "            \n",
    "            if n == 0 :\n",
    "                mindropoff_longitude = longitude\n",
    "                maxdropoff_longitude = longitude\n",
    "            elif  longitude < mindropoff_longitude:\n",
    "                mindropoff_longitude = longitude\n",
    "            elif longitude > maxdropoff_longitude:\n",
    "                maxdropoff_longitude = longitude\n",
    "            \n",
    "           \n",
    "    n +=1\n",
    "print(\"min and max values of dropoff_longitude is -\",mindropoff_longitude,maxdropoff_longitude)\n",
    "\n",
    "mindropoff_latitude = 0\n",
    "maxdropoff_latitude = 0\n",
    "n = 0\n",
    "for row in reader:\n",
    "    if n >0:\n",
    "         try:\n",
    "            latitude = float(row[13])\n",
    "    \n",
    "         except:\n",
    "            continue\n",
    "        \n",
    "        \n",
    "         if latitude is not None:\n",
    "            if latitude > 0 and latitude < 90:\n",
    "            \n",
    "                if n == 0 :\n",
    "                    mindropoff_latitude = latitude\n",
    "                    maxdropoff_latitude = latitude\n",
    "                elif  latitude < mindropoff_latitude:\n",
    "                    mindropoff_latitude = latitude\n",
    "                elif latitude > maxdropoff_latitude:\n",
    "                    maxdropoff_latitude = latitude            \n",
    "           \n",
    "    n +=1\n",
    "print(\"min and max values of dropoff_latitude is -\",mindropoff_latitude,maxdropoff_latitude)\n",
    "latitudemin=0\n",
    "latitudemax=79\n",
    "longitudemin=-77.979263\n",
    "longitudemax=-73.000656\n",
    "\n",
    "for row in reader:\n",
    "    if row[13]==latitudemin:\n",
    "        print(row[12])\n",
    "    elif row[11]==latitudemin:\n",
    "        print(row[10])\n",
    "    if row[13]==latitudemax:\n",
    "        print(row[12])\n",
    "    elif row[10]==latitudemax:\n",
    "        print(row[11])\n",
    "        \n",
    "    if row[12]==longitudemin:\n",
    "        print(row[13])\n",
    "    elif row[10]==longitudemin:\n",
    "        print(row[11])\n",
    "    if row[12]==longitudemax:\n",
    "        print(row[13])\n",
    "    elif row[10]==longitudemax:\n",
    "        print(row[11])\n",
    "        \n",
    "#What are the distinct values for each field\n",
    "data = [{k: str(v) for k, v in row.items()}\n",
    "        for row in csv.DictReader(f, skipinitialspace=True)]\n",
    "devhist1={}\n",
    "for row in reader:\n",
    "    if n>0:\n",
    "        \n",
    "        medallion=row[0]\n",
    "        if medallion in devhist.keys():\n",
    "              devhist[medallion] += 1\n",
    "        else:\n",
    "              devhist[medallion] = 1\n",
    "    n+=1\n",
    "print(devhist)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6b502be-b316-4e4f-b73a-0953b0075ce4",
   "metadata": {},
   "outputs": [],
   "source": [
    "devhist2={}\n",
    "for row in reader:\n",
    "    if n>0:\n",
    "        \n",
    "        hack_license=row[1]\n",
    "        if hack_license in devhist.keys():\n",
    "              devhist[hack_license] += 1\n",
    "        else:\n",
    "              devhist[hack_license] = 1\n",
    "    n+=1\n",
    "print(devhist2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7fa2e95-4cb9-4bca-9ca2-334f23de935a",
   "metadata": {},
   "outputs": [],
   "source": [
    "devhist3={}\n",
    "for row in reader:\n",
    "    if n>0:\n",
    "        \n",
    "        vendor_id=row[2]\n",
    "        if vendor_id in devhist.keys():\n",
    "              devhist[vendor_id] += 1\n",
    "        else:\n",
    "              devhist[vendor_id] = 1\n",
    "    n+=1\n",
    "print(devhist3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64bed7ce-f54a-4484-80d0-10e588d11f97",
   "metadata": {},
   "outputs": [],
   "source": [
    "devhist4={}\n",
    "for row in reader:\n",
    "    if n>0:\n",
    "        \n",
    "        rate_code=row[3]\n",
    "        if rate_code in devhist.keys():\n",
    "              devhist[rate_code] += 1\n",
    "        else:\n",
    "              devhist[rate_code] = 1\n",
    "    n+=1\n",
    "print(devhist4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09620a91-80e0-4d51-9ca8-d697259890ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "devhist5={}\n",
    "for row in reader:\n",
    "    if n>0:\n",
    "        \n",
    "        store_and_fwd_flag=row[4]\n",
    "        if store_and_fwd_flag in devhist.keys():\n",
    "              devhist[store_and_fwd_flag] += 1\n",
    "        else:\n",
    "              devhist[store_and_fwd_flag] = 1\n",
    "    n+=1\n",
    "print(devhist5)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "efd33378-6721-474f-b97d-6a13ab7a71bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<_csv.reader at 0x1fd3c165dc0>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "devhist6={}\n",
    "for row in reader:\n",
    "    if n>0:\n",
    "        \n",
    "        passenger_count=row[7]\n",
    "        if passenger_count in devhist.keys():\n",
    "              devhist[passenger_count] += 1\n",
    "        else:\n",
    "              devhist[passenger_count] = 1\n",
    "    n+=1\n",
    "print(devhist6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1afd9cf-958f-469e-a1b0-2aed358d2a01",
   "metadata": {},
   "outputs": [],
   "source": [
    "devhist7={}\n",
    "for row in reader:\n",
    "    if n>0:\n",
    "        \n",
    "        trip_time_in_secs=row[8]\n",
    "        if trip_time_in_secs in devhist.keys():\n",
    "              devhist[trip_time_in_secs] += 1\n",
    "        else:\n",
    "              devhist[trip_time_in_secs] = 1\n",
    "    n+=1\n",
    "print(devhist7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c791f8a-1c3a-4aa1-85f4-1ef4f462e677",
   "metadata": {},
   "outputs": [],
   "source": [
    "devhist8={}\n",
    "for row in reader:\n",
    "    if n>0:\n",
    "        \n",
    "        trip_distance=row[9]\n",
    "        if trip_distance in devhist.keys():\n",
    "              devhist[trip_distance] += 1\n",
    "        else:\n",
    "              devhist[trip_distance] = 1\n",
    "    n+=1\n",
    "print(devhist8)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86113713-ceef-4562-8821-61d2e0e97b58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'#What is the average trip distance? (You should use Haversine Distance)\\ndef haversine(lon1, lat1, lon2, lat2):\\n    # convert decimal degrees to radians \\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\\n\\n    # haversine formula \\n    dlon = lon2 - lon1 \\n    dlat = lat2 - lat1 \\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\\n    c = 2 * asin(sqrt(a)) \\n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles. Determines return value units.\\n    return c * r\\n\\nSum=0\\nfor row in reader:\\n   \\n    if n>0:\\n        try:\\n            trip_distance = haversine(float(row[10]),float(row[11]),float(row[12]),float(row[13]))\\n        except:\\n            continue\\n        if trip_distance is not None:\\n            Sum += trip_distance\\n            \\n       \\n    n += 1\\nAverage = Sum/n\\nprint(Average)'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#What is the average trip distance? (You should use Haversine Distance)\n",
    "def haversine(lon1, lat1, lon2, lat2):\n",
    "    # convert decimal degrees to radians \n",
    "    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n",
    "\n",
    "    # haversine formula \n",
    "    dlon = lon2 - lon1 \n",
    "    dlat = lat2 - lat1 \n",
    "    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n",
    "    c = 2 * asin(sqrt(a)) \n",
    "    r = 6371 # Radius of earth in kilometers. Use 3956 for miles. Determines return value units.\n",
    "    return c * r\n",
    "\n",
    "Sum=0\n",
    "for row in reader:\n",
    "   \n",
    "    if n>0:\n",
    "        try:\n",
    "            trip_distance = haversine(float(row[10]),float(row[11]),float(row[12]),float(row[13]))\n",
    "        except:\n",
    "            continue\n",
    "        if trip_distance is not None:\n",
    "            Sum += trip_distance\n",
    "            \n",
    "       \n",
    "    n += 1\n",
    "Average = Sum/n\n",
    "print(Average)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc-autonumbering": true,
  "toc-showcode": true,
  "toc-showmarkdowntxt": true
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
